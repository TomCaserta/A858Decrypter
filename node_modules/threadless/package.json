{
  "name": "threadless",
  "version": "0.0.6",
  "description": "Threading for nodejs and the browser built on web workers",
  "main": "index.js",
  "scripts": {
    "test": "node_modules/.bin/grunt ci"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/eugeneware/threadless"
  },
  "keywords": [
    "thread",
    "threading",
    "spawn",
    "process",
    "spawn"
  ],
  "author": {
    "name": "Eugene Ware",
    "email": "eugene@noblesamurai.com"
  },
  "license": "BSD-3-Clause",
  "bugs": {
    "url": "https://github.com/eugeneware/threadless/issues"
  },
  "dependencies": {
    "workerjs": "0.1.1",
    "JASON": "~0.1.3"
  },
  "devDependencies": {
    "expect.js": "~0.2.0",
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-watch": "~0.5.3",
    "grunt": "~0.4.1",
    "grunt-mocha-cli": "~1.1.0",
    "grunt-complexity": "~0.1.3",
    "grunt-cli": "~0.1.9"
  },
  "readme": "# threadless\n\nThreading for nodejs and the browser built on web workers\n\n[![build status](https://secure.travis-ci.org/eugeneware/threadless.png)](http://travis-ci.org/eugeneware/threadless)\n\n## Installation\n\nThis module is installed via npm:\n\n``` bash\n$ npm install threadless\n```\n\n## Background\n\nJavascript can handle high level of concurrency by using it's single-threaded\nevent-loop. This works as long as you don't have CPU intensive operations that\nblock the loop and make your user-interface or server non-responsive.\n\nHowever, Web Workers (or spawning a child process in node.js) allow you to\nrun in another process/thread. This module provides a standard interface\nfor running parallel tasks in node.js or in the browser. The node.js\nimplementation works on [workerjs](https://github.com/eugeneware/workerjs).\n\n## Example Usage\n\n``` js\nvar Thread = require('threadless');\n\n// create a function for background execution\n// NB: The function can't bind to any closures because it will be serialized\n// and run in a Web Worker\nvar thread = new Thread(function (n, cb) {\n  // CPU intensive operation that would block the event loop\n  function fibo(n) {\n    return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n  }\n\n  cb(null, fibo(n));\n});\n// call the web worker thread with a value of 30\nthread.run(30, function (err, result) {\n  if (err) return done(err);\n  expect(result).to.equal(1346269);\n  done();\n});\n```\n\n## API\n\n### new Thread(fn)\n\nCreates a new Thread instance based on the function passed in:\n\n* `fn` - The function that will be run in the background. Note that this\n  function will get serialized so any closure references won't work.\n  Any variables you want to pass through should go through the arguments.\n\n### thread.run([arg1, arg2,] cb)\n\n Runs the function in another thread with the following arguments.\n\n * `arguments` - list of arguments that will be passed to the thread function.\n   the arguments _can_ be functions, but they will be serialized before being\n   sent to the thread function (so no closure scope will be passed).\n * `cb` - the callback that will be called by the thread function. Ie. the\n   function must be asynchronous.\n\n### thread.kill()\n\nKills the thread.\n\n## Using with browserify\n\nTo use this in the browser, use the\n[browserify](https://github.com/substack/node-browserify) command.\n\nFor example, for the following files:\n\n``` html\n<!DOCTYPE html>\n<!-- app.html -->\n<script src=\"bundle.js\"></script>\n```\n\n``` js\n// app.js\nvar Thread = require('threadless');\nvar thread = new Thread(function (n, cb) {\n  // CPU intensive operation that would block the event loop\n  function fibo(n) {\n    return n > 1 ? fibo(n - 1) + fibo(n - 2) : 1;\n  }\n\n  cb(null, fibo(n));\n});\nthread.run(30, function (err, result) {\n  if (err) throw err;\n  console.log('the result is ' + result);\n});\n```\n\nRun the browserify command:\n\n``` bash\n$ browserify app.js > bundle.js\n```\n\nThen open up `app.html` in your browser.\n",
  "readmeFilename": "README.md",
  "_id": "threadless@0.0.6",
  "dist": {
    "shasum": "3219d766d75e0cf645f5556b6666ee08ecc86642",
    "tarball": "http://registry.npmjs.org/threadless/-/threadless-0.0.6.tgz"
  },
  "_from": "threadless@*",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "eugeneware",
    "email": "eugene@noblesamurai.com"
  },
  "maintainers": [
    {
      "name": "eugeneware",
      "email": "eugene@noblesamurai.com"
    }
  ],
  "directories": {},
  "_shasum": "3219d766d75e0cf645f5556b6666ee08ecc86642",
  "_resolved": "https://registry.npmjs.org/threadless/-/threadless-0.0.6.tgz"
}
