{
  "name": "gulp-logger",
  "version": "0.0.2",
  "description": "Gulp plugin for logging stream stages, transformation and progress",
  "main": "index.js",
  "scripts": {
    "test": "node test/test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chrisgreeff/gulp-logger.git"
  },
  "keywords": [
    "gulp",
    "gulpplugin",
    "log",
    "logger",
    "debug",
    "output",
    "progress"
  ],
  "author": {
    "name": "Chris Greeff"
  },
  "license": "ISC",
  "dependencies": {
    "chalk": "^0.5.1",
    "gulp-util": "^3.0.0",
    "rename": "^0.2.3",
    "through2": "^0.5.1"
  },
  "devDependencies": {
    "assert": "^1.1.1",
    "colored-tape": "^1.0.1",
    "gulp": "^3.8.6",
    "jslint": "^0.6.1"
  },
  "bugs": {
    "url": "https://github.com/chrisgreeff/gulp-logger/issues"
  },
  "homepage": "https://github.com/chrisgreeff/gulp-logger",
  "_id": "gulp-logger@0.0.2",
  "_shasum": "0ec000bf91e8cae424305da0f9057af3158332b0",
  "_from": "gulp-logger@0.0.2",
  "_npmVersion": "1.4.9",
  "_npmUser": {
    "name": "chrisgreeff",
    "email": "chris.r.greeff@gmail.com"
  },
  "maintainers": [
    {
      "name": "chrisgreeff",
      "email": "chris.r.greeff@gmail.com"
    }
  ],
  "dist": {
    "shasum": "0ec000bf91e8cae424305da0f9057af3158332b0",
    "tarball": "http://registry.npmjs.org/gulp-logger/-/gulp-logger-0.0.2.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/gulp-logger/-/gulp-logger-0.0.2.tgz",
  "readme": "gulp-logger\n===========\n\nLogger plugin for [gulp](http://gulpjs.com/) for logging stream stages, transformations and progress.\n\n# Install\n\n```bash\n$ npm install gulp-logger --save\n```\n\n# Basic Usage\n\nSomething like this:\n\n```js\nvar gulp = require('gulp'),\n    gzip = require('gulp-gzip'),\n    logger = require('gulp-logger');\n\ngulp.task('gzip', function () {\n    gulp.src('**/*.js')\n        .pipe(logger({\n            before: 'Starting Gzip...',\n            after: 'Gzipping complete!',\n            extname: '.js.gz',\n            showChange: true\n        }))\n        .pipe(gzip());\n});\n```\n\nAnd a folder structure like this:\n\n```text\nfiles-to-stream/\n    |- baz/\n    |   |- file.js\n    |   `- wat.js\n    |\n    |- foo.js\n    |- bar.js\n    `- derp.js\n```\n\nWould give you this:\n\n![Imgur](http://i.imgur.com/NvKNwAY.png)\n\n## Options\n\n#### `before` *String*\nThe message you want to show before the chunks are shown.\n\n#### `after` *String*\nThe message you want to show after the chunks are shown.\n\n#### `beforeEach` *String*\nThe message you want to show before each chunk.\n\n#### `afterEach` *String*\nThe message you want to show after each chunk.\n\n#### `prefix` *String*\nA constant value to prefix to each filename in the chunk.\n\n#### `suffix` *String*\nA constant value to suffix to each filename in the chunk.\n\n#### `extname` *String*\nA constant value to set as the extension for each filename in the chunk.\n\n#### `basename` *String*\nA constant value to set as the basename for each filename in the chunk.\n\n#### `dest` *String*\nA constant value to set as the dest for each filename in the chunk.\n\n#### `colors` *Boolean*\nWhether or not to turn off colors on the output.\n\n#### `display='rel'` *String*\n\nHow you want the path of the chunk to show.\n- `'rel'`: Relative path\n- `'abs'`: Absolute path\n- `'name'`: Filename\n",
  "readmeFilename": "README.md"
}
