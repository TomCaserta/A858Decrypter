{
  "name": "gulp-todo",
  "version": "2.6.2",
  "description": "Generate a TODO.md file from comments of files in stream",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pgilad/gulp-todo.git"
  },
  "license": "MIT",
  "author": {
    "name": "Gilad Peleg",
    "email": "giladp007@gmail.com",
    "url": "http://giladpeleg.com"
  },
  "main": "index.js",
  "files": [
    "index.js",
    "lib"
  ],
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha -R spec tests/*.js",
    "watchTest": "mocha --watch -R spec tests/*.js"
  },
  "keywords": [
    "gulpplugin",
    "gulp",
    "js",
    "fixme",
    "comments",
    "todo",
    "list",
    "parse",
    "generator",
    "ci"
  ],
  "dependencies": {
    "gulp-util": "^3.0.1",
    "leasot": "^1.3.2",
    "lodash.defaults": "^3.1.1",
    "lodash.omit": "^3.1.0",
    "through2": "^0.6.5"
  },
  "devDependencies": {
    "gulp": "^3.8.11",
    "gulp-header": "^1.2.2",
    "gulp-util": "^3.0.4",
    "gulp-wrap": "^0.11.0",
    "mocha": "^2.2.4",
    "should": "^6.0.1"
  },
  "readme": "# [gulp](https://github.com/wearefractal/gulp)-todo\n> Parse and output TODOs and FIXMEs from comments in your file in a stream\n\n[![NPM Version](http://img.shields.io/npm/v/gulp-todo.svg?style=flat)](https://npmjs.org/package/gulp-todo)\n[![NPM Downloads](http://img.shields.io/npm/dm/gulp-todo.svg?style=flat)](https://npmjs.org/package/gulp-todo)\n[![Build Status](http://img.shields.io/travis/pgilad/gulp-todo.svg?style=flat)](https://travis-ci.org/pgilad/gulp-todo)\n\n**Notice**: breaking changes in version 2.0.0\n\nParse your files in a gulp-stream, extracting todos/fixmes from comments and reporting them\nin a reporter to your choosing using [leasot](https://github.com/pgilad/leasot).\n\nIssues with the output should be reported on the [leasot issue tracker](https://github.com/pgilad/leasot/issues)\n\n## Install\n\nInstall with [npm](https://npmjs.org/package/gulp-todo)\n\n```sh\n$ npm install --save-dev gulp-todo\n```\n\n## Usage\n\n```js\nvar gulp = require('gulp');\nvar todo = require('gulp-todo');\n\n// generate a todo.md from your javascript files\ngulp.task('todo', function() {\n    gulp.src('js/**/*.js')\n        .pipe(todo())\n        .pipe(gulp.dest('./'));\n        // -> Will output a TODO.md with your todos\n});\n\n// generate todo from your jade files\ngulp.task('todo-jade', function() {\n    gulp.src('partials/**/*.jade')\n        .pipe(todo({ fileName: 'jade-todo.md' }))\n        .pipe(gulp.dest('./'));\n        // -> Will output a jade-todo.md with your todos\n});\n\n// get filenames relative to project root (where your gulpfile is)\ngulp.task('todo-absolute', function() {\n    gulp.src('js/**/*.js')\n        .pipe(todo({\n            absolute: true\n        }))\n        .pipe(gulp.dest('./'));\n});\n\n// get relative path filenames\ngulp.task('todo-absolute', function() {\n    gulp.src('js/**/*.js', { base: '/' })\n        .pipe(todo())\n        .pipe(gulp.dest('./'));\n});\n\n// create a json output of the comments (useful for CI such as jenkins)\ngulp.task('todo-json', function () {\n    gulp.src('./**/*.js', {\n        base: './'\n    })\n        .pipe(todo({\n            fileName: 'todo.json',\n            reporter: 'json'\n        }))\n        .pipe(gulp.dest('./'));\n});\n\n// output once in markdown and then output a json file as well\ngulp.task('todo-reporters', function() {\n    gulp.src('js/**/*.js')\n        .pipe(todo())\n        .pipe(gulp.dest('./')) //output todo.md as markdown\n        .pipe(todo.reporter('json', {fileName: 'todo.json'}))\n        .pipe(gulp.dest('./')) //output todo.json as json\n});\n\n\n// Delete the todo.md file if no todos were found\nvar gulpIf = require('gulp-if');\nvar del = require('del');\nvar vinylPaths = require('vinyl-paths');\ngulp.task('todo-delete', function() {\n    gulp.src('js/**/*.js')\n        .pipe(todo())\n        .pipe(gulpIf(function (file) {\n            return file.todos && Boolean(file.todos.length);\n        }, vinylPaths(del), gulp.dest('./'));\n});\n```\n\n#### Injecting the todo generated file into another template\n\nIf you want to inject the generated todo stream into another file (say a `readme.md.template`)\nyou can do the following:\n\n- Create `readme.md.template` file that contains the following marker, marking where you want to inject the generated todo file:\n\n```md\n### some previous content\n<%= marker %>\n```\n\n- Use the following code to inject into that markdown, creating a markdown file with the generated todo:\n\n```js\nvar fs = require('fs');\nvar path = require('path');\nvar gulp = require('gulp');\nvar todo = require('gulp-todo');\nvar template = require('lodash.template');\nvar through = require('through2');\n\ngulp.task('default', function () {\n    gulp.src('./js/**/*.js')\n        .pipe(todo())\n        .pipe(through.obj(function (file, enc, cb) {\n            //read and interpolate template\n            var newContents = template(fs.readFileSync('./readme.md.template'), {\n                marker: file.contents.toString()\n            });\n            //change file name\n            file.path = path.join(file.base, 'readme-new.md');\n            //replace old contents\n            file.contents = new Buffer(newContents);\n            //push new file\n            this.push(file);\n            cb();\n        }))\n       .pipe(gulp.dest('./'));\n});\n```\n\n## Supported Filetypes\n\nSee https://github.com/pgilad/leasot#supported-languages\n\n## API\n\n### todo(options)\n\n`options` is an optional object, that may contain the following properties:\n\n#### fileName\n\nSpecify the output filename.\n\n**Type**: `String`\n\n**Default**: `TODO.md`\n\n#### verbose\n\nOutput comments to console as well.\n\n**Type**: `Boolean`\n\n**Default**: `false`\n\n#### absolute\n\nOutput absolute paths of files (as available via `file.path`)\n\n#### reporter\n\nWhich reporter to use.\n\nAll other `params` are passed along to the selected reporter (except `verbose` and `fileName`)\n\nFor options and more information about using reporters,\nsee: https://github.com/pgilad/leasot#reporter and\nhttps://github.com/pgilad/leasot#built-in-reporters\n\n**Type**: `String|Function`\n\n**Default**: `markdown`\n\n### todo.reporter(reporter, options)\n\nUse another reporter in stream, will replace the contents of the output file.\nMust be used after `todo()`, since it uses the `file.todos` that are passed along.\n\nSee the example in the [usage](#usage)\n\n#### reporter\n\nSame options as the above settings for `reporter`\n\n#### options\n\nPass along options to the reporter, and also if you pass a `fileName` - it will rename the filename in stream.\n\n## License\n\nMIT @[Gilad Peleg](http://giladpeleg.com)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pgilad/gulp-todo/issues"
  },
  "homepage": "https://github.com/pgilad/gulp-todo#readme",
  "_id": "gulp-todo@2.6.2",
  "_from": "gulp-todo@>=2.6.0 <3.0.0"
}
